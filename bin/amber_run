#!/bin/bash

[ -z $AMBER_UTILS ] && { echo "AMBER_UTILS installation not found"; exit 1;}

source ~/bin/utils.sh
source $AMBER_UTILS/bin/amber_utils.sh

USAGE=$(cat <<-END
-----------------------
AMBER simulation script
-----------------------
 -p parameter file (default par.dat)
 -c coordinate file
 -t topology file
 -d run directory
 -h usage
-----------------------
END
)

setupfile="par.dat"

#process command line arguments
while [ $# -gt 0 ] 
do
    case $1 in
        -p)
             check_file $2
             setupfile=$2
             shift 2
             ;;
        -c)
             check_file $2
             coordfile_in=$2
             shift 2
             ;;
        -t)
             check_file $2
             parmfile_in=$2
             shift 2
             ;;
        -h)
            echo "$USAGE"
            exit 0
            ;;
        -d)
            check_nodir $2
            rundir=$2
            shift 2
            ;;
        *) # save other arguments
           PARAMS="$PARAMS $1"
           shift 1
           ;;
    esac
done

for var in $PARAMS
do
    case $var in
        *.inpcrd)
            inpcrdfile_in=${inpcrdfile_in:=$var}
             ;;
        *.x)
            restartfile_in=${restartfile_in:=$var}
            ;;
        *.prmtop)
            parmfile_in=${parmfile_in:=$var}
            ;;
        *) # save other arguments
           PARAMS1="$PARAMS1 $var"
    esac
done

for var in $PARAMS
do
  if [ -d "$var" ];then
    inpcrdfile_in=${inpcrdfile_in:=$(find_latest $var/*.inpcrd)}
    restartfile_in=${restartfile_in:=$(find_latest $var/*.x)}
    parmfile_in=${parmfile_in:=$(find_latest $var/*.prmtop)}
  fi
done

coordfile_in=${coordfile_in:=$restartfile_in}
coordfile_in=${coordfile_in:=$inpcrdfile_in}


#first get task, then defaults, and then resource again
source $setupfile
check_file $AMBER_TEMPLATES/${task}.dat && source $AMBER_TEMPLATES/${task}.dat
source $setupfile

#set other parameters
machine=$(get_hostname)
datetime=$(date +"%m-%d-%y %T")

if [ ! -z "$mdtime" ]
then
 mdsteps=$(echo "scale=0;${mdtime}/${mdstepsize}" | bc)
 ntave=$(echo "scale=0;${mdsteps}/4" | bc)
fi

if [ ! -z "$selection" ] 
then
 constraints="ibelly=1,bellymask="$selection","
fi


if [ -z "$coordfile_in" ]
then
echo "missing coord inpcrd file"
exit 1
fi
#adding "in" prefix to avoid accidental name clashing 
coordfile="in-"$(get_root_with_ext $coordfile_in)

if [ -z "$parmfile_in" ]
then
echo "missing parameter file"
exit 1
fi
parmfile=$(get_root_with_ext $parmfile_in)

rundir=${rundir:=$prefix-0}
INPUTFILE=$prefix"-0.in"

mkdir $rundir

cp $setupfile $rundir/
cp $coordfile_in $rundir/$coordfile
cp $parmfile_in $rundir/$parmfile



task_info | tee -a $rundir/$INPUTFILE

export mdtime
export mdstepsize
export temp_start
export temp_target
export mdsteps
export ntave
export constraints
export opt_cycles
envsubst < $templates_folder/$template >>$rundir/$INPUTFILE

cd $rundir
PARAMS="-exec pmemd.MPI -n ${nodes} -t ${runtime} -a ${account} -p $parmfile -c $coordfile -i $INPUTFILE $PARAMS1"

case $machine in
    cascade)
       echo "runing on cascade"
       amber_submit_cascade $PARAMS
       ;;
    macbook) 
       echo "runing on macbook is not set yet"
       ;;
    *) 
       echo "cannot run on unknown machine"
       ;;
esac





